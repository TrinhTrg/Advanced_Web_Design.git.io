const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { Product } = require('../models');

// üü¢ C·∫•u h√¨nh Multer ƒë·ªÉ l∆∞u file ·∫£nh
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const dir = './uploads';
    if (!fs.existsSync(dir)) fs.mkdirSync(dir);
    cb(null, dir);
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  }
});

const upload = multer({ storage });
exports.upload = upload;

// üü¢ Trang danh s√°ch s·∫£n ph·∫©m
exports.getAllProducts = async (req, res) => {
  try {
    const products = await Product.findAll();
    res.render('index', { title: 'Product List', products });
  } catch (error) {
    console.error(error);
    res.status(500).send('Error fetching products');
  }
};

// üü¢ Trang t·∫°o s·∫£n ph·∫©m
exports.showCreateForm = (req, res) => {
  res.render('admin/create', { title: 'Create Product' });
};

// üü¢ X·ª≠ l√Ω th√™m s·∫£n ph·∫©m m·ªõi
exports.createProduct = async (req, res) => {
  try {
    const { name, price, description } = req.body;
    const image = req.file ? req.file.filename : null;

    await Product.create({ name, price, description, image });

    res.redirect('/'); // ‚û§ Sau khi t·∫°o xong th√¨ quay l·∫°i trang danh s√°ch
  } catch (error) {
    console.error(error);
    res.status(500).send('Error creating product');
  }
};

// üü¢ Trang ch·ªânh s·ª≠a s·∫£n ph·∫©m
exports.getProductById = async (req, res) => {
  try {
    const product = await Product.findByPk(req.params.id);
    if (!product) return res.status(404).send('Product not found');

    res.render('admin/edit', { title: 'Edit Product', product });
  } catch (error) {
    console.error(error);
    res.status(500).send('Error fetching product');
  }
};

// üü¢ C·∫≠p nh·∫≠t s·∫£n ph·∫©m
exports.updateProduct = async (req, res) => {
  try {
    const product = await Product.findByPk(req.params.id);
    if (!product) return res.status(404).send('Product not found');

    product.name = req.body.name;
    product.price = req.body.price;
    product.description = req.body.description;

    if (req.file) {
      product.image = req.file.filename;
    }

    await product.save();
    res.redirect('/'); // ‚û§ C·∫≠p nh·∫≠t xong quay l·∫°i danh s√°ch
  } catch (error) {
    console.error(error);
    res.status(500).send('Error updating product');
  }
};

exports.deleteProduct = async (req, res) => {
  try {
    const product = await Product.findByPk(req.params.id);
    if (!product) return res.status(404).send('Product not found');

    // X√≥a file ·∫£nh n·∫øu c√≥
    if (product.image) {
      const imagePath = path.join(__dirname, '../uploads', product.image);
      if (fs.existsSync(imagePath)) fs.unlinkSync(imagePath);
    }

    await product.destroy();
    res.redirect('/'); // tr·ªü l·∫°i trang danh s√°ch
  } catch (error) {
    console.error(error);
    res.status(500).send('Error deleting product');
  }
};


