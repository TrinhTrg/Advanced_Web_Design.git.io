const { Op } = require('sequelize');
const Product = require('../models/productModel');

// -------------------
// ‚öôÔ∏è ADMIN SIDE (CRUD)
// -------------------

// üü¶ L·∫•y to√†n b·ªô s·∫£n ph·∫©m (ph√¢n trang + s·∫Øp x·∫øp)
exports.getAllProducts = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = 10;
    const offset = (page - 1) * limit;

    const sortBy = req.query.sortBy || 'id';
    const sortOrder = req.query.sortOrder === 'desc' ? 'DESC' : 'ASC';

    const { count, rows } = await Product.findAndCountAll({
      limit,
      offset,
      order: [[sortBy, sortOrder]],
    });

    res.render('admin/index', {
      products: rows,
      currentPage: page,
      totalPages: Math.ceil(count / limit),
      sortBy,
      sortOrder,
      title: 'Qu·∫£n l√Ω s·∫£n ph·∫©m'
    });
  } catch (err) {
    console.error('‚ùå L·ªói l·∫•y s·∫£n ph·∫©m admin:', err);
    res.status(500).send('L·ªói server khi l·∫•y s·∫£n ph·∫©m');
  }
};

// üü© Hi·ªÉn th·ªã form th√™m
exports.showCreateForm = (req, res) => {
  res.render('admin/create', { title: 'Th√™m s·∫£n ph·∫©m m·ªõi' });
};

// üü© Th√™m s·∫£n ph·∫©m m·ªõi
exports.create = async (req, res) => {
  try {
    const { name, price, description } = req.body;
    const image = req.file ? req.file.filename : null;

    const count = await Product.count();
    if (count === 0) {
      await Product.sequelize.query('ALTER TABLE products AUTO_INCREMENT = 1;');
    }

    await Product.create({ name, price, description, imageUrl: image });
    res.redirect('/admin');
  } catch (err) {
    console.error('‚ùå L·ªói t·∫°o s·∫£n ph·∫©m:', err);
    res.status(500).send('L·ªói server khi t·∫°o s·∫£n ph·∫©m');
  }
};

// üü® Hi·ªÉn th·ªã form ch·ªânh s·ª≠a
exports.edit = async (req, res) => {
  try {
    const product = await Product.findByPk(req.params.id);
    if (!product) return res.status(404).send('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');
    res.render('admin/edit', { product, title: 'Ch·ªânh s·ª≠a s·∫£n ph·∫©m' });
  } catch (err) {
    console.error('‚ùå L·ªói l·∫•y s·∫£n ph·∫©m ƒë·ªÉ s·ª≠a:', err);
    res.status(500).send('L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m');
  }
};

// C·∫≠p nh·∫≠t s·∫£n ph·∫©m
exports.update = async (req, res) => {
  try {
    const { name, price, description } = req.body;

    // T√¨m s·∫£n ph·∫©m hi·ªán t·∫°i
    const product = await Product.findByPk(req.params.id);
    if (!product) return res.status(404).send('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');

    //T·∫°o object d·ªØ li·ªáu c·∫≠p nh·∫≠t
    const updateData = { name, price, description };

    //N·∫øu c√≥ ·∫£nh m·ªõi th√¨ x√≥a ·∫£nh c≈©
    if (req.file) {
      const oldImagePath = path.join(__dirname, '..', 'uploads', product.imageUrl);
      if (product.imageUrl && fs.existsSync(oldImagePath)) {
        fs.unlinkSync(oldImagePath);
        console.log('üßπ ƒê√£ x√≥a ·∫£nh c≈©:', product.imageUrl);
      }
      updateData.imageUrl = req.file.filename;
    }

    //C·∫≠p nh·∫≠t database
    await product.update(updateData);

    res.redirect('/admin');
  } catch (err) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', err);
    res.status(500).send('L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m');
  }
};

// üü• Hi·ªÉn th·ªã form x√°c nh·∫≠n x√≥a
exports.showDeleteConfirm = async (req, res) => {
  try {
    const product = await Product.findByPk(req.params.id);
    if (!product) return res.status(404).send('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');
    res.render('admin/delete', { product, title: 'X√≥a s·∫£n ph·∫©m' });
  } catch (err) {
    console.error('‚ùå L·ªói hi·ªÉn th·ªã form x√≥a:', err);
    res.status(500).send('L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m');
  }
};

// üü• Th·ª±c hi·ªán x√≥a s·∫£n ph·∫©m
exports.delete = async (req, res) => {
  try {
    await Product.destroy({ where: { id: req.params.id } });

    const count = await Product.count();
    if (count === 0) {
      await Product.sequelize.query('ALTER TABLE products AUTO_INCREMENT = 1;');
    }

    res.redirect('/admin');
  } catch (err) {
    console.error('‚ùå L·ªói x√≥a s·∫£n ph·∫©m:', err);
    res.status(500).send('L·ªói khi x√≥a s·∫£n ph·∫©m');
  }
};
